// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DebtPurchased extends ethereum.Event {
  get params(): DebtPurchased__Params {
    return new DebtPurchased__Params(this);
  }
}

export class DebtPurchased__Params {
  _event: DebtPurchased;

  constructor(event: DebtPurchased) {
    this._event = event;
  }

  get strategy(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class DebtUpdated extends ethereum.Event {
  get params(): DebtUpdated__Params {
    return new DebtUpdated__Params(this);
  }
}

export class DebtUpdated__Params {
  _event: DebtUpdated;

  constructor(event: DebtUpdated) {
    this._event = event;
  }

  get strategy(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get currentDebt(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newDebt(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get assets(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Shutdown extends ethereum.Event {
  get params(): Shutdown__Params {
    return new Shutdown__Params(this);
  }
}

export class Shutdown__Params {
  _event: Shutdown;

  constructor(event: Shutdown) {
    this._event = event;
  }
}

export class StrategyChanged extends ethereum.Event {
  get params(): StrategyChanged__Params {
    return new StrategyChanged__Params(this);
  }
}

export class StrategyChanged__Params {
  _event: StrategyChanged;

  constructor(event: StrategyChanged) {
    this._event = event;
  }

  get strategy(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get changeType(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class StrategyReported extends ethereum.Event {
  get params(): StrategyReported__Params {
    return new StrategyReported__Params(this);
  }
}

export class StrategyReported__Params {
  _event: StrategyReported;

  constructor(event: StrategyReported) {
    this._event = event;
  }

  get strategy(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get gain(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get loss(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get currentDebt(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get protocolFees(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get totalFees(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get totalRefunds(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UpdatedAccountant extends ethereum.Event {
  get params(): UpdatedAccountant__Params {
    return new UpdatedAccountant__Params(this);
  }
}

export class UpdatedAccountant__Params {
  _event: UpdatedAccountant;

  constructor(event: UpdatedAccountant) {
    this._event = event;
  }

  get accountant(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class UpdatedDefaultQueue extends ethereum.Event {
  get params(): UpdatedDefaultQueue__Params {
    return new UpdatedDefaultQueue__Params(this);
  }
}

export class UpdatedDefaultQueue__Params {
  _event: UpdatedDefaultQueue;

  constructor(event: UpdatedDefaultQueue) {
    this._event = event;
  }

  get newDefaultQueue(): Array<Address> {
    return this._event.parameters[0].value.toAddressArray();
  }
}

export class UpdatedDepositLimit extends ethereum.Event {
  get params(): UpdatedDepositLimit__Params {
    return new UpdatedDepositLimit__Params(this);
  }
}

export class UpdatedDepositLimit__Params {
  _event: UpdatedDepositLimit;

  constructor(event: UpdatedDepositLimit) {
    this._event = event;
  }

  get depositLimit(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class UpdatedDepositLimitModule extends ethereum.Event {
  get params(): UpdatedDepositLimitModule__Params {
    return new UpdatedDepositLimitModule__Params(this);
  }
}

export class UpdatedDepositLimitModule__Params {
  _event: UpdatedDepositLimitModule;

  constructor(event: UpdatedDepositLimitModule) {
    this._event = event;
  }

  get depositLimitModule(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class UpdatedMaxDebtForStrategy extends ethereum.Event {
  get params(): UpdatedMaxDebtForStrategy__Params {
    return new UpdatedMaxDebtForStrategy__Params(this);
  }
}

export class UpdatedMaxDebtForStrategy__Params {
  _event: UpdatedMaxDebtForStrategy;

  constructor(event: UpdatedMaxDebtForStrategy) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get strategy(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newDebt(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UpdatedMinimumTotalIdle extends ethereum.Event {
  get params(): UpdatedMinimumTotalIdle__Params {
    return new UpdatedMinimumTotalIdle__Params(this);
  }
}

export class UpdatedMinimumTotalIdle__Params {
  _event: UpdatedMinimumTotalIdle;

  constructor(event: UpdatedMinimumTotalIdle) {
    this._event = event;
  }

  get minimumTotalIdle(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class UpdatedProfitMaxUnlockTime extends ethereum.Event {
  get params(): UpdatedProfitMaxUnlockTime__Params {
    return new UpdatedProfitMaxUnlockTime__Params(this);
  }
}

export class UpdatedProfitMaxUnlockTime__Params {
  _event: UpdatedProfitMaxUnlockTime;

  constructor(event: UpdatedProfitMaxUnlockTime) {
    this._event = event;
  }

  get profitMaxUnlockTime(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class UpdatedUseDefaultQueue extends ethereum.Event {
  get params(): UpdatedUseDefaultQueue__Params {
    return new UpdatedUseDefaultQueue__Params(this);
  }
}

export class UpdatedUseDefaultQueue__Params {
  _event: UpdatedUseDefaultQueue;

  constructor(event: UpdatedUseDefaultQueue) {
    this._event = event;
  }

  get useDefaultQueue(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class UpdatedWithdrawLimitModule extends ethereum.Event {
  get params(): UpdatedWithdrawLimitModule__Params {
    return new UpdatedWithdrawLimitModule__Params(this);
  }
}

export class UpdatedWithdrawLimitModule__Params {
  _event: UpdatedWithdrawLimitModule;

  constructor(event: UpdatedWithdrawLimitModule) {
    this._event = event;
  }

  get withdrawLimitModule(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get assets(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class VaultPackage__processReportResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class VaultPackage__strategiesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getActivation(): BigInt {
    return this.value0;
  }

  getLastReport(): BigInt {
    return this.value1;
  }

  getCurrentDebt(): BigInt {
    return this.value2;
  }

  getMaxDebt(): BigInt {
    return this.value3;
  }
}

export class VaultPackage extends ethereum.SmartContract {
  static bind(address: Address): VaultPackage {
    return new VaultPackage("VaultPackage", address);
  }

  DEBT_PURCHASER(): Bytes {
    let result = super.call("DEBT_PURCHASER", "DEBT_PURCHASER():(bytes32)", []);

    return result[0].toBytes();
  }

  try_DEBT_PURCHASER(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEBT_PURCHASER",
      "DEBT_PURCHASER():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DOMAIN_SEPARATOR(): Bytes {
    let result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DOMAIN_TYPE_HASH(): Bytes {
    let result = super.call(
      "DOMAIN_TYPE_HASH",
      "DOMAIN_TYPE_HASH():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_DOMAIN_TYPE_HASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_TYPE_HASH",
      "DOMAIN_TYPE_HASH():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  MAX_BPS(): BigInt {
    let result = super.call("MAX_BPS", "MAX_BPS():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAX_BPS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MAX_BPS", "MAX_BPS():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_BPS_EXTENDED(): BigInt {
    let result = super.call(
      "MAX_BPS_EXTENDED",
      "MAX_BPS_EXTENDED():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_MAX_BPS_EXTENDED(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_BPS_EXTENDED",
      "MAX_BPS_EXTENDED():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_QUEUE(): BigInt {
    let result = super.call("MAX_QUEUE", "MAX_QUEUE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAX_QUEUE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MAX_QUEUE", "MAX_QUEUE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ONE_YEAR(): BigInt {
    let result = super.call("ONE_YEAR", "ONE_YEAR():(uint256)", []);

    return result[0].toBigInt();
  }

  try_ONE_YEAR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("ONE_YEAR", "ONE_YEAR():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PERMIT_TYPE_HASH(): Bytes {
    let result = super.call(
      "PERMIT_TYPE_HASH",
      "PERMIT_TYPE_HASH():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_PERMIT_TYPE_HASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "PERMIT_TYPE_HASH",
      "PERMIT_TYPE_HASH():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  REPORTING_MANAGER(): Bytes {
    let result = super.call(
      "REPORTING_MANAGER",
      "REPORTING_MANAGER():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_REPORTING_MANAGER(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "REPORTING_MANAGER",
      "REPORTING_MANAGER():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  STRATEGY_MANAGER(): Bytes {
    let result = super.call(
      "STRATEGY_MANAGER",
      "STRATEGY_MANAGER():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_STRATEGY_MANAGER(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "STRATEGY_MANAGER",
      "STRATEGY_MANAGER():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  accountant(): Address {
    let result = super.call("accountant", "accountant():(address)", []);

    return result[0].toAddress();
  }

  try_accountant(): ethereum.CallResult<Address> {
    let result = super.tryCall("accountant", "accountant():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)],
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  apiVersion(): string {
    let result = super.call("apiVersion", "apiVersion():(string)", []);

    return result[0].toString();
  }

  try_apiVersion(): ethereum.CallResult<string> {
    let result = super.tryCall("apiVersion", "apiVersion():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  assessShareOfUnrealisedLosses(
    strategy: Address,
    assetsNeeded: BigInt,
  ): BigInt {
    let result = super.call(
      "assessShareOfUnrealisedLosses",
      "assessShareOfUnrealisedLosses(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(strategy),
        ethereum.Value.fromUnsignedBigInt(assetsNeeded),
      ],
    );

    return result[0].toBigInt();
  }

  try_assessShareOfUnrealisedLosses(
    strategy: Address,
    assetsNeeded: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "assessShareOfUnrealisedLosses",
      "assessShareOfUnrealisedLosses(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(strategy),
        ethereum.Value.fromUnsignedBigInt(assetsNeeded),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  asset(): Address {
    let result = super.call("asset", "asset():(address)", []);

    return result[0].toAddress();
  }

  try_asset(): ethereum.CallResult<Address> {
    let result = super.tryCall("asset", "asset():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  assetType(): BigInt {
    let result = super.call("assetType", "assetType():(uint256)", []);

    return result[0].toBigInt();
  }

  try_assetType(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("assetType", "assetType():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(addr: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(addr),
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(addr: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(addr),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  convertToAssets(shares: BigInt): BigInt {
    let result = super.call(
      "convertToAssets",
      "convertToAssets(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(shares)],
    );

    return result[0].toBigInt();
  }

  try_convertToAssets(shares: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "convertToAssets",
      "convertToAssets(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(shares)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  convertToShares(assets: BigInt): BigInt {
    let result = super.call(
      "convertToShares",
      "convertToShares(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(assets)],
    );

    return result[0].toBigInt();
  }

  try_convertToShares(assets: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "convertToShares",
      "convertToShares(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(assets)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  defaultQueue(param0: BigInt): Address {
    let result = super.call("defaultQueue", "defaultQueue(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toAddress();
  }

  try_defaultQueue(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "defaultQueue",
      "defaultQueue(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deposit(assets: BigInt, receiver: Address): BigInt {
    let result = super.call("deposit", "deposit(uint256,address):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(assets),
      ethereum.Value.fromAddress(receiver),
    ]);

    return result[0].toBigInt();
  }

  try_deposit(assets: BigInt, receiver: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "deposit",
      "deposit(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(assets),
        ethereum.Value.fromAddress(receiver),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  depositLimit(): BigInt {
    let result = super.call("depositLimit", "depositLimit():(uint256)", []);

    return result[0].toBigInt();
  }

  try_depositLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("depositLimit", "depositLimit():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  depositLimitModule(): Address {
    let result = super.call(
      "depositLimitModule",
      "depositLimitModule():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_depositLimitModule(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "depositLimitModule",
      "depositLimitModule():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  fullProfitUnlockDate(): BigInt {
    let result = super.call(
      "fullProfitUnlockDate",
      "fullProfitUnlockDate():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_fullProfitUnlockDate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "fullProfitUnlockDate",
      "fullProfitUnlockDate():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDebt(strategy: Address): BigInt {
    let result = super.call("getDebt", "getDebt(address):(uint256)", [
      ethereum.Value.fromAddress(strategy),
    ]);

    return result[0].toBigInt();
  }

  try_getDebt(strategy: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getDebt", "getDebt(address):(uint256)", [
      ethereum.Value.fromAddress(strategy),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDefaultQueue(): Array<Address> {
    let result = super.call(
      "getDefaultQueue",
      "getDefaultQueue():(address[])",
      [],
    );

    return result[0].toAddressArray();
  }

  try_getDefaultQueue(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getDefaultQueue",
      "getDefaultQueue():(address[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getDefaultQueueLength(): BigInt {
    let result = super.call(
      "getDefaultQueueLength",
      "getDefaultQueueLength():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getDefaultQueueLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDefaultQueueLength",
      "getDefaultQueueLength():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role),
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account),
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  initialized(): boolean {
    let result = super.call("initialized", "initialized():(bool)", []);

    return result[0].toBoolean();
  }

  try_initialized(): ethereum.CallResult<boolean> {
    let result = super.tryCall("initialized", "initialized():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastProfitUpdate(): BigInt {
    let result = super.call(
      "lastProfitUpdate",
      "lastProfitUpdate():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_lastProfitUpdate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastProfitUpdate",
      "lastProfitUpdate():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxDeposit(receiver: Address): BigInt {
    let result = super.call("maxDeposit", "maxDeposit(address):(uint256)", [
      ethereum.Value.fromAddress(receiver),
    ]);

    return result[0].toBigInt();
  }

  try_maxDeposit(receiver: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxDeposit", "maxDeposit(address):(uint256)", [
      ethereum.Value.fromAddress(receiver),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxMint(receiver: Address): BigInt {
    let result = super.call("maxMint", "maxMint(address):(uint256)", [
      ethereum.Value.fromAddress(receiver),
    ]);

    return result[0].toBigInt();
  }

  try_maxMint(receiver: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxMint", "maxMint(address):(uint256)", [
      ethereum.Value.fromAddress(receiver),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxRedeem(
    owner: Address,
    maxLoss: BigInt,
    _strategies: Array<Address>,
  ): BigInt {
    let result = super.call(
      "maxRedeem",
      "maxRedeem(address,uint256,address[]):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(maxLoss),
        ethereum.Value.fromAddressArray(_strategies),
      ],
    );

    return result[0].toBigInt();
  }

  try_maxRedeem(
    owner: Address,
    maxLoss: BigInt,
    _strategies: Array<Address>,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxRedeem",
      "maxRedeem(address,uint256,address[]):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(maxLoss),
        ethereum.Value.fromAddressArray(_strategies),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxWithdraw(
    owner: Address,
    maxLoss: BigInt,
    _strategies: Array<Address>,
  ): BigInt {
    let result = super.call(
      "maxWithdraw",
      "maxWithdraw(address,uint256,address[]):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(maxLoss),
        ethereum.Value.fromAddressArray(_strategies),
      ],
    );

    return result[0].toBigInt();
  }

  try_maxWithdraw(
    owner: Address,
    maxLoss: BigInt,
    _strategies: Array<Address>,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxWithdraw",
      "maxWithdraw(address,uint256,address[]):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(maxLoss),
        ethereum.Value.fromAddressArray(_strategies),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minimumTotalIdle(): BigInt {
    let result = super.call(
      "minimumTotalIdle",
      "minimumTotalIdle():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_minimumTotalIdle(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minimumTotalIdle",
      "minimumTotalIdle():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mint(shares: BigInt, receiver: Address): BigInt {
    let result = super.call("mint", "mint(uint256,address):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(shares),
      ethereum.Value.fromAddress(receiver),
    ]);

    return result[0].toBigInt();
  }

  try_mint(shares: BigInt, receiver: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("mint", "mint(uint256,address):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(shares),
      ethereum.Value.fromAddress(receiver),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nonces(param0: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_nonces(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  permit(
    owner: Address,
    spender: Address,
    amount: BigInt,
    deadline: BigInt,
    v: i32,
    r: Bytes,
    s: Bytes,
  ): boolean {
    let result = super.call(
      "permit",
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32):(bool)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(deadline),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s),
      ],
    );

    return result[0].toBoolean();
  }

  try_permit(
    owner: Address,
    spender: Address,
    amount: BigInt,
    deadline: BigInt,
    v: i32,
    r: Bytes,
    s: Bytes,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "permit",
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32):(bool)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(deadline),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  previewDeposit(assets: BigInt): BigInt {
    let result = super.call(
      "previewDeposit",
      "previewDeposit(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(assets)],
    );

    return result[0].toBigInt();
  }

  try_previewDeposit(assets: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "previewDeposit",
      "previewDeposit(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(assets)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  previewMint(shares: BigInt): BigInt {
    let result = super.call("previewMint", "previewMint(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(shares),
    ]);

    return result[0].toBigInt();
  }

  try_previewMint(shares: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "previewMint",
      "previewMint(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(shares)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  previewRedeem(shares: BigInt): BigInt {
    let result = super.call(
      "previewRedeem",
      "previewRedeem(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(shares)],
    );

    return result[0].toBigInt();
  }

  try_previewRedeem(shares: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "previewRedeem",
      "previewRedeem(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(shares)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  previewWithdraw(assets: BigInt): BigInt {
    let result = super.call(
      "previewWithdraw",
      "previewWithdraw(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(assets)],
    );

    return result[0].toBigInt();
  }

  try_previewWithdraw(assets: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "previewWithdraw",
      "previewWithdraw(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(assets)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pricePerShare(): BigInt {
    let result = super.call("pricePerShare", "pricePerShare():(uint256)", []);

    return result[0].toBigInt();
  }

  try_pricePerShare(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pricePerShare",
      "pricePerShare():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  processReport(strategy: Address): VaultPackage__processReportResult {
    let result = super.call(
      "processReport",
      "processReport(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(strategy)],
    );

    return new VaultPackage__processReportResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_processReport(
    strategy: Address,
  ): ethereum.CallResult<VaultPackage__processReportResult> {
    let result = super.tryCall(
      "processReport",
      "processReport(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(strategy)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new VaultPackage__processReportResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  profitMaxUnlockTime(): BigInt {
    let result = super.call(
      "profitMaxUnlockTime",
      "profitMaxUnlockTime():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_profitMaxUnlockTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "profitMaxUnlockTime",
      "profitMaxUnlockTime():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  profitUnlockingRate(): BigInt {
    let result = super.call(
      "profitUnlockingRate",
      "profitUnlockingRate():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_profitUnlockingRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "profitUnlockingRate",
      "profitUnlockingRate():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redeem(
    shares: BigInt,
    receiver: Address,
    owner: Address,
    maxLoss: BigInt,
    _strategies: Array<Address>,
  ): BigInt {
    let result = super.call(
      "redeem",
      "redeem(uint256,address,address,uint256,address[]):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(shares),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(maxLoss),
        ethereum.Value.fromAddressArray(_strategies),
      ],
    );

    return result[0].toBigInt();
  }

  try_redeem(
    shares: BigInt,
    receiver: Address,
    owner: Address,
    maxLoss: BigInt,
    _strategies: Array<Address>,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "redeem",
      "redeem(uint256,address,address,uint256,address[]):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(shares),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(maxLoss),
        ethereum.Value.fromAddressArray(_strategies),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  shutdown(): boolean {
    let result = super.call("shutdown", "shutdown():(bool)", []);

    return result[0].toBoolean();
  }

  try_shutdown(): ethereum.CallResult<boolean> {
    let result = super.tryCall("shutdown", "shutdown():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  strategies(param0: Address): VaultPackage__strategiesResult {
    let result = super.call(
      "strategies",
      "strategies(address):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return new VaultPackage__strategiesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
    );
  }

  try_strategies(
    param0: Address,
  ): ethereum.CallResult<VaultPackage__strategiesResult> {
    let result = super.tryCall(
      "strategies",
      "strategies(address):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new VaultPackage__strategiesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
      ),
    );
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalAssets(): BigInt {
    let result = super.call("totalAssets", "totalAssets():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalAssets(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalAssets", "totalAssets():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalDebt(): BigInt {
    let result = super.call("totalDebt", "totalDebt():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalDebt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalDebt", "totalDebt():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalIdle(): BigInt {
    let result = super.call("totalIdle", "totalIdle():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalIdle(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalIdle", "totalIdle():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupplyAmount(): BigInt {
    let result = super.call(
      "totalSupplyAmount",
      "totalSupplyAmount():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_totalSupplyAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalSupplyAmount",
      "totalSupplyAmount():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(receiver: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(receiver),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    receiver: Address,
    amount: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(receiver),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, receiver: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    receiver: Address,
    amount: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  unlockedShares(): BigInt {
    let result = super.call("unlockedShares", "unlockedShares():(uint256)", []);

    return result[0].toBigInt();
  }

  try_unlockedShares(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "unlockedShares",
      "unlockedShares():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  updateDebt(strategy: Address, newDebt: BigInt): BigInt {
    let result = super.call(
      "updateDebt",
      "updateDebt(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(strategy),
        ethereum.Value.fromUnsignedBigInt(newDebt),
      ],
    );

    return result[0].toBigInt();
  }

  try_updateDebt(
    strategy: Address,
    newDebt: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "updateDebt",
      "updateDebt(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(strategy),
        ethereum.Value.fromUnsignedBigInt(newDebt),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  useDefaultQueue(): boolean {
    let result = super.call("useDefaultQueue", "useDefaultQueue():(bool)", []);

    return result[0].toBoolean();
  }

  try_useDefaultQueue(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "useDefaultQueue",
      "useDefaultQueue():(bool)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  withdraw(
    assets: BigInt,
    receiver: Address,
    owner: Address,
    maxLoss: BigInt,
    _strategies: Array<Address>,
  ): BigInt {
    let result = super.call(
      "withdraw",
      "withdraw(uint256,address,address,uint256,address[]):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(assets),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(maxLoss),
        ethereum.Value.fromAddressArray(_strategies),
      ],
    );

    return result[0].toBigInt();
  }

  try_withdraw(
    assets: BigInt,
    receiver: Address,
    owner: Address,
    maxLoss: BigInt,
    _strategies: Array<Address>,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdraw",
      "withdraw(uint256,address,address,uint256,address[]):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(assets),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(maxLoss),
        ethereum.Value.fromAddressArray(_strategies),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawLimitModule(): Address {
    let result = super.call(
      "withdrawLimitModule",
      "withdrawLimitModule():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_withdrawLimitModule(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "withdrawLimitModule",
      "withdrawLimitModule():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class AddStrategyCall extends ethereum.Call {
  get inputs(): AddStrategyCall__Inputs {
    return new AddStrategyCall__Inputs(this);
  }

  get outputs(): AddStrategyCall__Outputs {
    return new AddStrategyCall__Outputs(this);
  }
}

export class AddStrategyCall__Inputs {
  _call: AddStrategyCall;

  constructor(call: AddStrategyCall) {
    this._call = call;
  }

  get newStrategy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddStrategyCall__Outputs {
  _call: AddStrategyCall;

  constructor(call: AddStrategyCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BuyDebtCall extends ethereum.Call {
  get inputs(): BuyDebtCall__Inputs {
    return new BuyDebtCall__Inputs(this);
  }

  get outputs(): BuyDebtCall__Outputs {
    return new BuyDebtCall__Outputs(this);
  }
}

export class BuyDebtCall__Inputs {
  _call: BuyDebtCall;

  constructor(call: BuyDebtCall) {
    this._call = call;
  }

  get strategy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BuyDebtCall__Outputs {
  _call: BuyDebtCall;

  constructor(call: BuyDebtCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get assets(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _profitMaxUnlockTime(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _assetType(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _asset(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _name(): string {
    return this._call.inputValues[3].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[4].value.toString();
  }

  get _accountant(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _admin(): Address {
    return this._call.inputValues[6].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get shares(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PermitCall extends ethereum.Call {
  get inputs(): PermitCall__Inputs {
    return new PermitCall__Inputs(this);
  }

  get outputs(): PermitCall__Outputs {
    return new PermitCall__Outputs(this);
  }
}

export class PermitCall__Inputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class PermitCall__Outputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ProcessReportCall extends ethereum.Call {
  get inputs(): ProcessReportCall__Inputs {
    return new ProcessReportCall__Inputs(this);
  }

  get outputs(): ProcessReportCall__Outputs {
    return new ProcessReportCall__Outputs(this);
  }
}

export class ProcessReportCall__Inputs {
  _call: ProcessReportCall;

  constructor(call: ProcessReportCall) {
    this._call = call;
  }

  get strategy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ProcessReportCall__Outputs {
  _call: ProcessReportCall;

  constructor(call: ProcessReportCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get shares(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get owner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get maxLoss(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _strategies(): Array<Address> {
    return this._call.inputValues[4].value.toAddressArray();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class RevokeStrategyCall extends ethereum.Call {
  get inputs(): RevokeStrategyCall__Inputs {
    return new RevokeStrategyCall__Inputs(this);
  }

  get outputs(): RevokeStrategyCall__Outputs {
    return new RevokeStrategyCall__Outputs(this);
  }
}

export class RevokeStrategyCall__Inputs {
  _call: RevokeStrategyCall;

  constructor(call: RevokeStrategyCall) {
    this._call = call;
  }

  get strategy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get force(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class RevokeStrategyCall__Outputs {
  _call: RevokeStrategyCall;

  constructor(call: RevokeStrategyCall) {
    this._call = call;
  }
}

export class SetAccountantCall extends ethereum.Call {
  get inputs(): SetAccountantCall__Inputs {
    return new SetAccountantCall__Inputs(this);
  }

  get outputs(): SetAccountantCall__Outputs {
    return new SetAccountantCall__Outputs(this);
  }
}

export class SetAccountantCall__Inputs {
  _call: SetAccountantCall;

  constructor(call: SetAccountantCall) {
    this._call = call;
  }

  get newAccountant(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetAccountantCall__Outputs {
  _call: SetAccountantCall;

  constructor(call: SetAccountantCall) {
    this._call = call;
  }
}

export class SetDefaultQueueCall extends ethereum.Call {
  get inputs(): SetDefaultQueueCall__Inputs {
    return new SetDefaultQueueCall__Inputs(this);
  }

  get outputs(): SetDefaultQueueCall__Outputs {
    return new SetDefaultQueueCall__Outputs(this);
  }
}

export class SetDefaultQueueCall__Inputs {
  _call: SetDefaultQueueCall;

  constructor(call: SetDefaultQueueCall) {
    this._call = call;
  }

  get newDefaultQueue(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class SetDefaultQueueCall__Outputs {
  _call: SetDefaultQueueCall;

  constructor(call: SetDefaultQueueCall) {
    this._call = call;
  }
}

export class SetDepositLimitCall extends ethereum.Call {
  get inputs(): SetDepositLimitCall__Inputs {
    return new SetDepositLimitCall__Inputs(this);
  }

  get outputs(): SetDepositLimitCall__Outputs {
    return new SetDepositLimitCall__Outputs(this);
  }
}

export class SetDepositLimitCall__Inputs {
  _call: SetDepositLimitCall;

  constructor(call: SetDepositLimitCall) {
    this._call = call;
  }

  get _depositLimit(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetDepositLimitCall__Outputs {
  _call: SetDepositLimitCall;

  constructor(call: SetDepositLimitCall) {
    this._call = call;
  }
}

export class SetDepositLimitModuleCall extends ethereum.Call {
  get inputs(): SetDepositLimitModuleCall__Inputs {
    return new SetDepositLimitModuleCall__Inputs(this);
  }

  get outputs(): SetDepositLimitModuleCall__Outputs {
    return new SetDepositLimitModuleCall__Outputs(this);
  }
}

export class SetDepositLimitModuleCall__Inputs {
  _call: SetDepositLimitModuleCall;

  constructor(call: SetDepositLimitModuleCall) {
    this._call = call;
  }

  get _depositLimitModule(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetDepositLimitModuleCall__Outputs {
  _call: SetDepositLimitModuleCall;

  constructor(call: SetDepositLimitModuleCall) {
    this._call = call;
  }
}

export class SetMinimumTotalIdleCall extends ethereum.Call {
  get inputs(): SetMinimumTotalIdleCall__Inputs {
    return new SetMinimumTotalIdleCall__Inputs(this);
  }

  get outputs(): SetMinimumTotalIdleCall__Outputs {
    return new SetMinimumTotalIdleCall__Outputs(this);
  }
}

export class SetMinimumTotalIdleCall__Inputs {
  _call: SetMinimumTotalIdleCall;

  constructor(call: SetMinimumTotalIdleCall) {
    this._call = call;
  }

  get _minimumTotalIdle(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMinimumTotalIdleCall__Outputs {
  _call: SetMinimumTotalIdleCall;

  constructor(call: SetMinimumTotalIdleCall) {
    this._call = call;
  }
}

export class SetProfitMaxUnlockTimeCall extends ethereum.Call {
  get inputs(): SetProfitMaxUnlockTimeCall__Inputs {
    return new SetProfitMaxUnlockTimeCall__Inputs(this);
  }

  get outputs(): SetProfitMaxUnlockTimeCall__Outputs {
    return new SetProfitMaxUnlockTimeCall__Outputs(this);
  }
}

export class SetProfitMaxUnlockTimeCall__Inputs {
  _call: SetProfitMaxUnlockTimeCall;

  constructor(call: SetProfitMaxUnlockTimeCall) {
    this._call = call;
  }

  get _newProfitMaxUnlockTime(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetProfitMaxUnlockTimeCall__Outputs {
  _call: SetProfitMaxUnlockTimeCall;

  constructor(call: SetProfitMaxUnlockTimeCall) {
    this._call = call;
  }
}

export class SetUseDefaultQueueCall extends ethereum.Call {
  get inputs(): SetUseDefaultQueueCall__Inputs {
    return new SetUseDefaultQueueCall__Inputs(this);
  }

  get outputs(): SetUseDefaultQueueCall__Outputs {
    return new SetUseDefaultQueueCall__Outputs(this);
  }
}

export class SetUseDefaultQueueCall__Inputs {
  _call: SetUseDefaultQueueCall;

  constructor(call: SetUseDefaultQueueCall) {
    this._call = call;
  }

  get _useDefaultQueue(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetUseDefaultQueueCall__Outputs {
  _call: SetUseDefaultQueueCall;

  constructor(call: SetUseDefaultQueueCall) {
    this._call = call;
  }
}

export class SetWithdrawLimitModuleCall extends ethereum.Call {
  get inputs(): SetWithdrawLimitModuleCall__Inputs {
    return new SetWithdrawLimitModuleCall__Inputs(this);
  }

  get outputs(): SetWithdrawLimitModuleCall__Outputs {
    return new SetWithdrawLimitModuleCall__Outputs(this);
  }
}

export class SetWithdrawLimitModuleCall__Inputs {
  _call: SetWithdrawLimitModuleCall;

  constructor(call: SetWithdrawLimitModuleCall) {
    this._call = call;
  }

  get _withdrawLimitModule(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetWithdrawLimitModuleCall__Outputs {
  _call: SetWithdrawLimitModuleCall;

  constructor(call: SetWithdrawLimitModuleCall) {
    this._call = call;
  }
}

export class ShutdownVaultCall extends ethereum.Call {
  get inputs(): ShutdownVaultCall__Inputs {
    return new ShutdownVaultCall__Inputs(this);
  }

  get outputs(): ShutdownVaultCall__Outputs {
    return new ShutdownVaultCall__Outputs(this);
  }
}

export class ShutdownVaultCall__Inputs {
  _call: ShutdownVaultCall;

  constructor(call: ShutdownVaultCall) {
    this._call = call;
  }
}

export class ShutdownVaultCall__Outputs {
  _call: ShutdownVaultCall;

  constructor(call: ShutdownVaultCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UpdateDebtCall extends ethereum.Call {
  get inputs(): UpdateDebtCall__Inputs {
    return new UpdateDebtCall__Inputs(this);
  }

  get outputs(): UpdateDebtCall__Outputs {
    return new UpdateDebtCall__Outputs(this);
  }
}

export class UpdateDebtCall__Inputs {
  _call: UpdateDebtCall;

  constructor(call: UpdateDebtCall) {
    this._call = call;
  }

  get strategy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get newDebt(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateDebtCall__Outputs {
  _call: UpdateDebtCall;

  constructor(call: UpdateDebtCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class UpdateMaxDebtForStrategyCall extends ethereum.Call {
  get inputs(): UpdateMaxDebtForStrategyCall__Inputs {
    return new UpdateMaxDebtForStrategyCall__Inputs(this);
  }

  get outputs(): UpdateMaxDebtForStrategyCall__Outputs {
    return new UpdateMaxDebtForStrategyCall__Outputs(this);
  }
}

export class UpdateMaxDebtForStrategyCall__Inputs {
  _call: UpdateMaxDebtForStrategyCall;

  constructor(call: UpdateMaxDebtForStrategyCall) {
    this._call = call;
  }

  get strategy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get newMaxDebt(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateMaxDebtForStrategyCall__Outputs {
  _call: UpdateMaxDebtForStrategyCall;

  constructor(call: UpdateMaxDebtForStrategyCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get assets(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get owner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get maxLoss(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _strategies(): Array<Address> {
    return this._call.inputValues[4].value.toAddressArray();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
